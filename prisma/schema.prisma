// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  clerkId   String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  stripe    StripeCustomer?
  dogs      Dog[]

  @@id([clerkId])
}

model StripeCustomer {
  id               String   @id @default(cuid())
  clerkId          String   @unique
  stripeCustomerId String   @unique
  email            String
  businessType     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [clerkId])
  userId           String   @unique
}

model Dog {
  id         String       @id @default(cuid())
  name       String
  breed      String
  image      Blob[]
  metadata   DogMetadata?
  bookings   Booking[]
  owner      User         @relation(fields: [ownerId], references: [clerkId])
  ownerId    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  BasketItem BasketItem[]
}

model Blob {
  id                 String   @id @default(cuid())
  contentDisposition String?
  contentType        String?
  downloadUrl        String?
  pathname           String?
  url                String?
  dog                Dog      @relation(fields: [dogId], references: [id])
  dogId              String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model DogMetadata {
  id                      String              @id @default(cuid())
  dogId                   String              @unique
  dog                     Dog                 @relation(fields: [dogId], references: [id])
  dob                     DateTime
  vaccinationRecords      VaccinationRecord[]
  vetName                 String?
  vetPhone                String?
  vetAddress              String?
  emergencyContactName    String?
  emergencyContactPhone   String?
  emergencyContactAddress String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model VaccinationRecord {
  id        String      @id @default(cuid())
  dogId     String
  dog       DogMetadata @relation(fields: [dogId], references: [id])
  name      String
  date      DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Booking {
  id           String     @id @default(cuid())
  orgId        String
  dogId        String
  dog          Dog        @relation(fields: [dogId], references: [id])
  customerId   String
  date         DateTime
  slot         SlotPreset @relation(fields: [slotPresetId], references: [id])
  isPaid       Boolean
  payment      Payment?   @relation(fields: [paymentId], references: [id])
  paymentId    String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  slotPresetId String

  @@index([orgId, dogId, customerId])
}

model SlotPreset {
  id        String   @id @default(cuid())
  orgId     String
  startTime String
  endTime   String
  price     Int
  currency  String
  maxDogs   Int
  days      Int[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Booking    Booking[]
  BasketItem BasketItem[]

  @@index([orgId])
}

model Basket {
  id        String       @id @default(cuid())
  userId    String
  orgId     String
  items     BasketItem[]
  finished  Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model BasketItem {
  id           String     @id @default(cuid())
  dogId        String
  dog          Dog        @relation(fields: [dogId], references: [id])
  orgId        String
  date         DateTime
  slotPresetId String
  slot         SlotPreset @relation(fields: [slotPresetId], references: [id])
  Basket       Basket?    @relation(fields: [basketId], references: [id])
  basketId     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Payment {
  id        String    @id @default(cuid())
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
